// <auto-generated />
using System;
using Demeter.Infrastracture;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Demeter.Infrastracture.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230627221201_Changed relation and added userID")]
    partial class ChangedrelationandaddeduserID
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Demeter.Domain.FoodDomain.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("FoodType");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Image");

                    b.Property<string>("Nutrients")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Nutrients");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasAlternateKey("Title");

                    b.ToTable("Foods", (string)null);
                });

            modelBuilder.Entity("Demeter.Domain.FoodDomain.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("DateTime")
                        .HasColumnName("DateRegistered");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MealType");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("Meals", (string)null);
                });

            modelBuilder.Entity("Demeter.Domain.FoodDomain.MealFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodID")
                        .HasColumnType("int")
                        .HasColumnName("Food");

                    b.Property<int>("MealID")
                        .HasColumnType("int")
                        .HasColumnName("Meal");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("NrOfPortions")
                        .HasColumnType("int")
                        .HasColumnName("NrOfPortions");

                    b.HasKey("Id");

                    b.HasIndex("FoodID");

                    b.HasIndex("MealID");

                    b.HasIndex("MealId");

                    b.ToTable("MealFoods");
                });

            modelBuilder.Entity("Demeter.Domain.FoodDomain.MealFood", b =>
                {
                    b.HasOne("Demeter.Domain.FoodDomain.Food", "Food")
                        .WithMany("MealsFood")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demeter.Domain.FoodDomain.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demeter.Domain.FoodDomain.Meal", null)
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId");

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Demeter.Domain.FoodDomain.Food", b =>
                {
                    b.Navigation("MealsFood");
                });

            modelBuilder.Entity("Demeter.Domain.FoodDomain.Meal", b =>
                {
                    b.Navigation("MealFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
